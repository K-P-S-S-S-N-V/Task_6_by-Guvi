# -*- coding: utf-8 -*-
"""Answered Assignment_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YApUK1gqj98VBVtObksYDhtRU3pzr4V7

by @poorna venkatesh kadali

In this Google collab we will find Assignment 8 that was given by GUVI - Greek Networks

# Assignment8

Let us import modules realeted to our present project it includes modules Pandas Module, Matplotlib Module, Numpy Module, and Sklearn - Linear model
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model

"""# How Much is Your Car Worth?

Data about the retail price of 2005 General Motors cars can be found in `car_data.csv`.

The columns are:

1. Price: suggested retail price of the used 2005 GM car in excellent condition.
2. Mileage: number of miles the car has been driven
3. Make: manufacturer of the car such as Saturn, Pontiac, and Chevrolet
4. Model: specific models for each car manufacturer such as Ion, Vibe, Cavalier
5. Trim (of car): specific type of car model such as SE Sedan 4D, Quad Coupe 2D          
6. Type: body type such as sedan, coupe, etc.      
7. Cylinder: number of cylinders in the engine        
8. Liter: a more specific measure of engine size     
9. Doors: number of doors           
10. Cruise: indicator variable representing whether the car has cruise control (1 = cruise)
11. Sound: indicator variable representing whether the car has upgraded speakers (1 = upgraded)
12. Leather: indicator variable representing whether the car has leather seats (1 = leather)

"""

df = pd.read_csv("car_data (1).csv")
df.head() # to print top 5 data lines or Head data of the given dataset

df.info()

df.describe()

df.shape

df.isnull().sum()

df.duplicated()

df.columns

"""## Tasks, Part 1

1. Find the linear regression equation for mileage vs price.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)

"""

X=df.iloc[:,1:2].values

Y=df.iloc[:,0:1].values

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25)

regressor=LinearRegression()
regressor.fit(x_train,y_train)
result=regressor.predict(x_test)

print(regressor.score(x_train,y_train))
print(regressor.coef_)
print(regressor.score(x_test,y_test))

print("r-Squared",regressor.score(X,Y))

print("intercept",regressor.intercept_)

regressor.fit(X,Y)
regressor.predict(X)

plt.scatter(X, Y, color='r')
plt.plot(X,regressor.predict(X) )
plt.xlabel('Mileage')
plt.ylabel('Price')
plt.title('Mileage vs Price')

"""## Tasks, Part 2

1. Use mileage, cylinders, liters, doors, cruise, sound, and leather to find the linear regression equation.
2. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)
3. Find the combination of the factors that is the best predictor for price.

"""

df.columns

X=df[['Mileage',  'Cylinder','Liter', 'Doors', 'Cruise', 'Sound', 'Leather']].values
Y=df[['Price']].values

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25)

regressor1=LinearRegression()
regressor1.fit(x_train,y_train)
result=regressor1.predict(x_test)

print(regressor1.score(x_train,y_train))

print(regressor1.score(x_test,y_test))

print("Coefficent",regressor1.coef_)
print("Intercept",regressor1.intercept_)
print("R-Squared",regressor1.score(X,Y))

import seaborn as sns

df.boxplot(by ='Doors', column ='Price', grid = False)
plt.show()

car_features = ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather']

def lin_reg_eq(cols, df_in, focus='Price', print_this=False):
    input_cols = df_in[cols]
    focus_output = df_in[focus]
    regr = linear_model.LinearRegression()
    regr.fit(input_cols, focus_output)
    if print_this:
        print('The equation for columns {} w.r.t. {}:\n'.format(cols, focus))
        for n, x in enumerate(cols):
            print('({} * {}) + '.format(regr.coef_[n], x))
        print('{}'.format(regr.intercept_))
    return regr

regr_features = lin_reg_eq(car_features, df, print_this=True)

print('Score of the above linear regression: {}'
      .format(regr_features.score(df[car_features], df['Price'])))

import itertools
combinations = []
for x in range(1,8):
    combinations.append(itertools.combinations(car_features, x))

def lin_reg_wrt_focus(cols, df_in, focus='Price'):
    '''cols is a list of lists'''
    input_cols = df_in[cols]
    focus_output = df_in[focus]
    regr = linear_model.LinearRegression()
    regr.fit(input_cols, focus_output)
    return regr.score(input_cols, focus_output)

def get_combos(cols):
    return [list1(combinations(cols, n + 1)) for n in range(len(cols))]

def all_combo_scores(combos, df_in, focus='Price'):
    combo_scores = {}
    for m in range(len(combos)):
        for n in combos[m]:
            combo_scores[n] = lin_reg_wrt_focus(list(n), df_in, focus)
    return combo_scores

combos = get_combos(car_features)
combo_scores = all_combo_scores(combos, df)
score_list1 = sorted(combo_scores.items(), key=lambda c: c[1], reverse=True)
for score in score_list1:
    print(score[1], score[0])

"""## Tasks, Hard Mode

1. Research dummy variables in scikit-learn to see how to use the make, model, and body type.
2. Find the best combination of factors to predict price.
"""

df_mmt = df.copy()

df_make = pd.get_dummies(df['Make'])
df_mmt[list(df_make.columns)] = df_make
df_mmt.pop('Make')

df_model = pd.get_dummies(df['Model'])
df_mmt[list(df_model.columns)] = df_model
df_mmt.pop('Model')

df_type = pd.get_dummies(df['Type'])
df_mmt[list(df_type.columns)] = df_type
df_mmt.pop('Type')

pd.set_option('display.max_columns', None)
df_mmt.head(1)

columns = list(df_make.columns)
columns.extend(df_model.columns)
columns.extend(df_type.columns)
input_cols = []
for item in columns:
    input_cols.append([item])
input_cols[:3]

df.columns

Make=pd.get_dummies(df['Make'], drop_first=True)
Model=pd.get_dummies(df['Model'],drop_first=True)
Type=pd.get_dummies(df['Type'],drop_first=True)
df_1=pd.concat([df,Make,Model,Type],axis=1)
df_1.head(1)

df_1.columns

X=df_1[[
        'Cadillac', 'Chevrolet',
       'Pontiac', 'SAAB', 'Saturn', '9_3', '9_3 HO', '9_5', '9_5 HO', 'AVEO',
       'Bonneville', 'CST-V', 'CTS', 'Cavalier', 'Century', 'Classic',
       'Cobalt', 'Corvette', 'Deville', 'G6', 'GTO', 'Grand Am', 'Grand Prix',
       'Impala', 'Ion', 'L Series', 'Lacrosse', 'Lesabre', 'Malibu',
       'Monte Carlo', 'Park Avenue', 'STS-V6', 'STS-V8', 'Sunfire', 'Vibe',
       'XLR-V8', 'Coupe', 'Hatchback', 'Sedan', 'Wagon']].values

Y=df_1['Price'].values

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25)

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(x_train,y_train)
result=regressor.predict(x_test)

print(regressor.score(x_train,y_train))
print(regressor.coef_)
print(regressor.score(x_test,y_test))

import matplotlib.pyplot as plt

y_pred=regressor.predict(x_test)
x_pred=regressor.predict(x_train)

combo_twos = list1(combinations(car_features, 2))
combo_twos_list = [[x[0], x[1]] for x in combo_twos]
combo_twos_list1[:3]

def all_combos_plus_scores(combos, combo_addition, df_in, focus='Price'):
    scores = {}
    for c_a in combo_addition:
        combos_c = deepcopy(combos)
        for cb in combos_c:
            cb.extend(c_a)
            scores[(cb[0], cb[1], cb[2])] = lin_reg_wrt_focus(cb, df_in, focus)
    return scores

car_data_combos = all_combos_plus_scores(combo_twos_list1, input_cols, df_mmt)
car_data_combos_list = sorted(car_data_combos.items(), key=lambda c: c[1], reverse=True)
max_dict = {}
for score_ in car_data_combos_list:
    try:
        max_dict[score_[0][2]]
    except:
        max_dict[score_[0][2]] = score_[1]
        print(score_[1], score_[0])

car_data_2 = {}
for item in deepcopy(input_cols):
    car_data_2[item[0]] = lin_reg_wrt_focus(item, df_mmt)

score_list2 = sorted(car_data_2.items(), key=lambda c: c[1], reverse=True)
for score in score_list2:
    print(score[1], score[0])

adjusted_car_features = car_features + ['Cadillac', 'Convertible', 'Chevrolet']
lin_reg_wrt_focus(adjusted_car_features, df_mmt)

adjusted_car_features_2 = ['Cadillac', 'Convertible', 'Chevrolet', 'Mileage', 'Cylinder', 'Cruise', 'Liter']
lin_reg_wrt_focus(adjusted_car_features_2, df_mmt)

# The Dataset of the given project is inthe format of CSV. import Data set as CSV file