# -*- coding: utf-8 -*-
"""Answered_Boston housing dataset_Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qr7VyrPWJKl4NRDLZb4daZUDtcBDJ2K3
"""

by @ Poorna venkatesh kadali

"""# Boston housing dataset"""

from sklearn.datasets import load_boston
dataset  = load_boston()

print(dataset.DESCR)

dataset.feature_names

type(dataset)

import pandas as pd
X = pd.DataFrame(dataset.data,columns = dataset.feature_names) #features
X.head(5)

dataset.data.shape

Y = pd.DataFrame(dataset.target,columns = ["Actual"]) #Output values
Y.shape

from sklearn.linear_model import SGDRegressor
model  = SGDRegressor()

from sklearn.model_selection import KFold,cross_val_score
kf = KFold(n_splits = 5)
import numpy as np
np.array(cross_val_score(model,X, Y,cv = kf,scoring = 'r2')).mean()

X.describe().T

#Standardization
from sklearn.preprocessing import StandardScaler
fun = StandardScaler()
std_X = fun.fit_transform(X)

pd.DataFrame(std_X,columns = dataset.feature_names).describe().T

np.array(cross_val_score(model,std_X, Y,cv = kf,scoring = 'r2')).mean()

from sklearn.linear_model import LinearRegression
model = LinearRegression()
np.array(cross_val_score(model,std_X, Y,cv = kf,scoring = 'r2')).mean()

from sklearn.model_selection import train_test_split
xtr, xtest,ytr,ytest = train_test_split(std_X, Y,test_size = 0.2,random_state = 1)

model = SGDRegressor(max_iter=1000,tol = 0.00000001)
model.fit(xtr,ytr)

model.n_iter_

from sklearn.model_selection import GridSearchCV
params = {'loss':['squared_error','huber'],
          'tol':[0.1,0.01],
          'alpha':[0.1,0.01],
          'penalty':['l1','l2','elasticnet'],
          'learning_rate':['constant','invscaling','optimal','adaptive'],
          'eta0':[0.01,0.001]
         }

model = SGDRegressor()
gcv = GridSearchCV(model,param_grid = params,cv = 2,scoring = 'neg_mean_absolute_error')
gcv.fit(std_X,Y)

gcv.best_params_

gcv.best_score_

std_X[:,[0,1]].shape

inp = std_X[:,[0,1]]

X.corr() #Correlation --> [-1,1]

model = SGDRegressor(max_iter=1000,tol = 0.00000001,early_stopping = True,validation_fraction=0.2)
model.fit(xtr,ytr)

model.n_iter_

model.predict(xtest)

from sklearn.metrics import r2_score,mean_absolute_error
r2_score(ytest,model.predict(xtest))

mean_absolute_error(ytest,model.predict(xtest))

