# -*- coding: utf-8 -*-
"""Answered Assignment 5_6_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xb5G7O5A0jRojT6NaxMBaybFODRigX7-

by Poorna Venkatesh kadali - A GUVI -Greek Networks Assignment
"""

## This Google collab includes Assignment 5,6, and 7

# Commented out IPython magic to ensure Python compatibility.
#Import Pandas, Matplotlib, Numpy, Sklearn - Linear_model, Itertools, Copy - Deepcopy Modules in Python

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model
from copy import deepcopy
import itertools as it
# %matplotlib inline

"""# Assignment 5

## Ground Cricket Chirps

In _The Song of Insects_ (1948) by George W. Pierce, Pierce mechanically measured the frequency (the number of wing vibrations per second) of chirps (or pulses of sound) made by a striped ground cricket, at various ground temperatures.  Since crickets are ectotherms (cold-blooded), the rate of their physiological processes and their overall metabolism are influenced by temperature.  Consequently, there is reason to believe that temperature would have a profound effect on aspects of their behavior, such as chirp frequency.

In general, it was found that crickets did not sing at temperatures colder than 60º F. or warmer than 100º F.
"""

ground_cricket_data = {
                      "Chirps/Second": [20.0, 16.0, 19.8, 18.4, 17.1, 15.5, 14.7,
                                         15.7, 15.4, 16.3, 15.0, 17.2, 16.0, 17.0,
                                         14.4],
                       "Ground Temperature": [88.6, 71.6, 93.3, 84.3, 80.6, 75.2, 69.7,
                                              71.6, 69.4, 83.3, 79.6, 82.6, 80.6, 83.5,
                                              76.3]
                       }
df = pd.DataFrame(ground_cricket_data)
df.head()    # Print Head area of data with code df.head()

df.isnull().sum() #No Null Values

df.columns # Let us check what are columns available in advance

df.describe()

"""### Tasks

1. Find the linear regression equation for this data.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)
4. Extrapolate data:  If the ground temperature reached 95, then at what approximate rate would you expect the crickets to be chirping?
5. Interpolate data:  With a listening device, you discovered that on a particular morning the crickets were chirping at a rate of 18 chirps per second.  What was the approximate ground temperature that morning? 
"""

df.shape

reg = linear_model.LinearRegression()
ground_temp = df[['Ground Temperature']]
chirps_sec = df['Chirps/Second']
reg.fit(ground_temp, chirps_sec)

# Now Let us find the linear regression equation for this available data.

print('Linear Regression Equation: y = {:.4f} * x + {:.4f}'
      .format(reg.coef_[0], reg.intercept_))

# Now Chart the original data and the equation on the chart.

plt.scatter(ground_temp, chirps_sec, color='m')
plt.plot(ground_temp, reg.predict(ground_temp))
plt.title('Ground Cricket Chirps/Sec by Ground Temperature')
plt.xlabel('Ground Temp (˚F)')
plt.ylabel('Chirps/Sec')
plt.show()

# Find the equation's R2 score (use the .score method) to determine whether the equation is a good fit for this data.

print('R^2 score for this equation: {:.4f}'
      .format(reg.score(ground_temp, chirps_sec)))

# Extrapolate data: If the ground temperature reached 95, then at what approximate rate would you expect the crickets to be chirping?

reg.predict(ground_temp)

"""# Assignment6

## Brain vs. Body Weight

In the file `brain_body.txt`, the average brain and body weight for a number of mammal species are recorded. Load this data into a Pandas data frame.
"""

# Note: upload brain_body.txt in Google Collab 
df_1 = pd.read_fwf("brain_body.txt")

# Read Data
# Let us read few data in the top of dataset
df_1.head()

#check Null data

df_1.isnull().sum()

df_1.duplicated()

# Let us check columns in advance

df_1.columns

df_1.describe()

"""
### Tasks

1. Find the linear regression equation for this data for brain weight to body weight.
2. Chart the original data and the equation on the chart.
3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the
equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)"""

x=df_1[['Brain']].values
y=df_1[['Body']].values

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

regressor=LinearRegression()
regressor.fit(x_train,y_train)
y_pred=regressor.predict(x_test)
x_pred=regressor.predict(x_train)

print(regressor.score(x_train,y_train))
print(regressor.score(x_test,y_test))

plt.scatter(x_train,y_train,color='blue')
plt.plot(x_train,x_pred,color='green')
plt.scatter(x_test,y_test,color='red')
plt.show()

"""# Assignment7

## Salary Discrimination

The file `salary.txt` contains data for 52 tenure-track professors at a small Midwestern college. This data was used in legal proceedings in the 1980s about discrimination against women in salary.

The data in the file, by column:

1. Sex. 1 for female, 0 for male.
2. Rank. 1 for assistant professor, 2 for associate professor, 3 for full professor.
3. Year. Number of years in current rank.
4. Degree. Highest degree. 1 for doctorate, 0 for master's.
5. YSdeg. Years since highest degree was earned.
6. Salary. Salary/year in dollars.
"""

# Note: upload Salary.txt data in Google collab

df_2 = pd.read_fwf("salary.txt", header=None, 
                 names=["Sex", "Rank", "Year", "Degree", "YSdeg", "Salary"])

# Let us print few data in that was available in the top of teh dataset

df_2.head()

df_2.shape

df_2[2:4]

"""### Tasks

1. Find the linear regression equation for this data using columns 1-5 to column 6.
2. Find the selection of columns with the best $R^2$ score.
3. Report whether sex is a factor in salary.
"""

X=df_2.drop(['Salary'],axis=1)
Y=df_2['Salary']

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3)
regressor=LinearRegression()
regressor.fit(x_train,y_train)
y_pred=regressor.predict(x_test)
x_pred=regressor.predict(x_train)

print(regressor.score(x_train,y_train))
print(regressor.score(x_test,y_test))

print(regressor.score(x_train,y_train))
print(regressor.coef_)

# Dataset was given in Text format upload them in the Google collab before.